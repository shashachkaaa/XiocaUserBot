from utils.imports import *
from utils.func import *
from utils.misc import *

BASE_PATH = os.path.abspath(os.getcwd())

@Client.on_message(filters.command(["loadmod", "lm"], prefix) & filters.user(allowed))
async def loadmod(client, message):
    try:
    	r = message.reply_to_message.document
    except:
    	return await answer(message, "<emoji id=5238224607638468926>‚ùì</emoji> <b>–ß—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å?</b>")
    if r is None:
        return await answer(message, '<emoji id=5237993272109967450>‚ùå</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–∞–π–ª!</b>')
    
    if '.py' in r.file_name:
    	pass
    else:
    	return await answer(message, '<emoji id=5237993272109967450>‚ùå</emoji> <b>–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .py</b>')

    module_name = r.file_name
    name = module_name.replace('.py', '')
    ms = await answer(message, f'<emoji id=5210696719129392502>üîß</emoji> <b>–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–¥—É–ª—å <code>{name}</code></b>')

    if os.path.exists(f"./modules/custom_modules/{module_name}"):
        await unload_module(module_name, client)
    
    await client.download_media(r.file_id, file_name=f'./modules/custom_modules/{module_name}')
    
    try:
        try:
        	module, dev, pic, description = await load_module(name, client, message)
        except TypeError:
        	return
    except Exception as e:
        os.remove(f"./modules/custom_modules/{module_name}")
        return await answer(ms, format_exc(e))
        
    installed = f"<b><emoji id=5237907553152672597>‚úÖ</emoji> –ú–æ–¥—É–ª—å <code>{name}</code> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n{module_help(name, False, dev, description)}"
    
    db.set(name, 'dev', dev)
    db.set(name, 'pic', pic)
    db.set(name, 'description', description)
    
    try:
    	if pic == '':
    		await answer(ms, installed)
    	else:
    		await answer(ms, photo=True, chat_id=ms[0].chat.id, response=pic, caption=installed)
    except Exception as e:
    	await answer(ms, format_exc(e))
    	os.remove(f"./modules/custom_modules/{module_name}")

@Client.on_message(filters.command(["unloadmod", "unlm"], prefix) & filters.user(allowed))
async def unload_mods(client: Client, message: Message):
    if len(message.command) <= 1:
        return await answer(message, "<emoji id=5238224607638468926>‚ùì</emoji> <b>–ß—Ç–æ –≤—ã–≥—Ä—É–∂–∞—Ç—å?</b>")

    module_name = message.command[1].lower()
    
    matches = process.extract(module_name, modules_help.keys(), limit=3)
    
    best_module_name = []
    
    if matches[0][1] < 100:
    	for best in matches:
    		best_module_name.append(best[0])
    
    try:
    	module_name = best_module_name[0]
    	nm = '<emoji id=5312383351217201533>‚ö†Ô∏è</emoji> <b>–¢–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>'
    except:
    	module_name = message.command[1].lower()
    	nm = ''
    
    if os.path.exists(f"{BASE_PATH}/modules/custom_modules/{module_name}.py"):
        try:
            await unload_module(module_name, client)
            db.drop_table(module_name)
        except Exception as e:
            return await answer(message, format_exc(e))

        os.remove(f"{BASE_PATH}/modules/custom_modules/{module_name}.py")
        await answer(message, f'<emoji id=5258130763148172425>üóë</emoji> <b>–ú–æ–¥—É–ª—å <code>{module_name.replace(".py", "")}</code> —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω!</b>\n\n{nm}')
    elif os.path.exists(f"{BASE_PATH}/modules/{module_name}.py"):
        await answer(message, f'<emoji id=5312383351217201533>‚ö†Ô∏è</emoji> <b>–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–¥—É–ª—å {module_name}, —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!\n\n{nm}</b>')
    else:
        await answer(message, f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>')
        
@Client.on_message(filters.command("ml", prefix) & filters.user(allowed))
async def ml(client, message):
	try:
		module_name = message.command[1].lower()
	except:
		return await answer(message, '<emoji id=5237993272109967450>‚ùå</emoji> <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è</b>')
	
	matches = process.extract(module_name, modules_help.keys(), limit=3)
    
	best_module_name = []
    
	if matches[0][1] < 100:
		for best in matches:
			best_module_name.append(best[0])
    
	try:
		module_name = best_module_name[0]
		nm = '<emoji id=5312383351217201533>‚ö†Ô∏è</emoji> <b>–¢–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>'
	except:
		module_name = message.command[1].lower()
		nm = ''
	
	if os.path.exists(f"{BASE_PATH}/modules/custom_modules/{module_name}.py"):
		await answer(message, chat_id=message.chat.id, document=True, response=f'{BASE_PATH}/modules/custom_modules/{module_name}.py', caption = f'<emoji id=5433653135799228968>üìÅ</emoji> <b>–§–∞–π–ª</b> <code>{module_name}</code>\n\n<emoji id=5372905603695910757>üåô</emoji> <code>.lm</code> <b>–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å</b>\n\n{nm}')
	elif os.path.exists(f"{BASE_PATH}/modules/{module_name}.py"):
		await answer(message, chat_id=message.chat.id, document=True, response=f'{BASE_PATH}/modules/{module_name}.py', caption = f'<emoji id=5433653135799228968>üìÅ</emoji> <b>–§–∞–π–ª</b> <code>{module_name}</code>\n\n<emoji id=5372905603695910757>üåô</emoji> <code>.lm</code> <b>–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å</b>\n\n{nm}')
	else:
		await answer(message, f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>')

modules_help["loader"] = {
	"lm [reply]": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å",
	"unlm [–º–æ–¥—É–ª—å]": "–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å",
	"ml [–º–æ–¥—É–ª—å]": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–¥—É–ª–µ–º"
}