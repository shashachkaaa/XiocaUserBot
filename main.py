import pip, os, re
try:
	from pyrogram import Client, filters
	from pyrogram.types import ChatPermissions
	from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
	from gtts import gTTS
	import sqlite3, logging, time, requests, asyncio, pyttsx3, datetime, random, json, g4f, html, psutil, platform, sys, pyfiglet
#	from config import api_id, api_hash, id
	from datetime import datetime, timedelta
	from time import gmtime, strptime, strftime
	from io import StringIO
	from contextlib import redirect_stdout
	import subprocess
	import speech_recognition as sr
	from pydub import AudioSegment
	from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
	import pytz
	from pyrogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
	from pyrogram.raw.functions.account import ReportPeer
	from pyrogram.raw.types import *
	from unidecode import unidecode as ui
	from colorama import Fore, Style
except ImportError:
	pip.main(['install', '-r', 'requirements.txt'])
	if os.name == "nt":
	    os.execvp(
	        "python",
	        [
	            "python",
	            "main.py",
	        ],
	     )
	else:
	    os.execvp(
	        "python3",
	        [
	            "python3",
	            "main.py",
	        ],
	     )

version = '0.0.1 beta'
system = platform.system()
start_time = time.time()

async def get_user_info():
    await client.start()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API
try:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    with open("user_data.txt", "r") as file:
#    	api_id, api_hash = map(int, file.read().split("\n"))
        api_id = file.readline().strip()
        api_hash = file.readline().strip()
        
        api_id = api_id.replace(f'api_id=', '')
        api_hash = api_hash.replace(f'api_hash=', '')
        api_id  = int(api_id[0])
        api_hash = str(api_hash[0])
        
except FileNotFoundError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_id = int(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID: "))
    api_hash = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API HASH: ")

    with open("user_data.txt", "w") as file:
        file.write(f"api_id={api_id}\napi_hash='{api_hash}'")

client = Client("session", api_id, api_hash)
app = client
logging.basicConfig(level=logging.INFO)

#asyncio.run(get_user_info())

authed = client.authorize()

if authed:
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
else:
    # –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    phone_number = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    code = client.send_code(phone_number)

    # –í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    input_code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    client.sign_in(phone_number, input_code)

subprocess.call(['apt', 'install', 'ffmpeg', '-y'])

if os.name == "nt":
        	os.system("cls")
else:
        	os.system("clear")
print(Fore.YELLOW + Style.BRIGHT + '''
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£Ñ‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†õ‚†ª‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£∑‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚°ü‚†π‚†ø‚†ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ø‚†ã‚°¨‚¢ø‚£ø‚£∑‚£§‚£§‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚°á‚¢∏‚°á‚¢∏‚£ø‚£ø‚£ø‚†ü‚†Å‚¢Ä‚£¨‚¢Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ß‚£à‚£õ‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚£æ‚†Å‚¢Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£Ñ‚£Ä‚†ô‚†∑‚¢ã‚£º‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á
‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á
‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å
‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä
‚†∏‚£ø‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä
‚†Ä‚¢π‚£ø‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä
‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†ª‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ç‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†ã‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä''')
print(Fore.YELLOW + Style.BRIGHT + pyfiglet.figlet_format('xioca', font = 'starwars') + Fore.WHITE)
print(Fore.YELLOW + Style.BRIGHT + '            XIOKA HAS STARTED' + Fore.WHITE)

async def get_user_id(username):
    try:
        user = await app.get_users(username)
        return user.id
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        return None

async def get_chat_id(username):
    try:
        chat = await app.get_chat(username)
        return chat.id
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        return None


def get_current_time():
    tz_msk = pytz.timezone('Europe/Moscow') 
    current_time = datetime.now(tz_msk)
    return current_time.strftime("%H:%M")

def get_report_reason(text):
    if text == "Report for child abuse.":
        return InputReportReasonChildAbuse()
    elif text == "Report for impersonation.":
        return InputReportReasonFake()
    elif text == "Report for copyrighted content.":
        return InputReportReasonCopyright()
    elif text == "Report an irrelevant geogroup.":
        return InputReportReasonGeoIrrelevant()
    elif text == "Other.":
        return InputReportReasonOther()

def resp(qu):
	response = g4f.ChatCompletion.create(model='gpt-4o', max_tokens = 10000, provider=g4f.Provider.ChatGptEs, messages=[{'role': 'system', 'content': ('–¢—ã –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞—Ç—å —Å —á–µ–º —É–≥–æ–¥–Ω–æ')}, {'role': 'user', 'content': qu}])
	return response

def htm(text):
    return html.escape(text)

connect = sqlite3.connect("db.db")
cursor = connect.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS settings(
	prefix STRING,
	name STRING,
	autoname STRING,
	tags_chat INT,
	tags STRING,
	dels_chat INT,
	dels STRING
)
""")
cursor.execute("""CREATE TABLE IF NOT EXISTS messages(
	message_id INT,
	user_id INT,
	message_text STRING
)
""")

def get_prefix():
	try:
		get_pref = cursor.execute(f'SELECT prefix from settings').fetchone()[0]
	except:
		cursor.execute("INSERT INTO settings VALUES(?, ?, ?, ?, ?, ?, ?);", ('.', 'off', 'off', 0, 0, 0, 0))
		connect.commit()
	get_pref = cursor.execute(f'SELECT prefix from settings').fetchone()[0]
	return get_pref
	
prefix = get_prefix()
print(prefix)

def restart():
    if os.name == "nt":
        os.execvp(
            "python",
i            [
                "python",
                "main.py",
            ],
        )
    else:
        os.execvp(
            "python3",
            [
                "python3",
                "main.py",
            ],
        )

help_text = f"""<emoji id=5258503720928288433>‚ÑπÔ∏è</emoji> –ü–æ–º–æ—â—å –ø–æ —é–∑–µ—Ä–±–æ—Ç—É:

<emoji id=5472212201131482064>üëÆ‚Äç‚ôÇ</emoji> <b>–î–ª—è —á–∞—Ç–æ–≤:</b>
	<i>{prefix}mute [user_id/username] (reason) ¬ª –ó–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
	{prefix}unmute [user_id/username] (reason) ¬ª –†–∞–∑–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
	{prefix}ban [user_id/username] (reason) ¬ª –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
	{prefix}unban [user_id/username] (reason) ¬ª –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
	{prefix}pin [reply message] ¬ª –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
	{prefix}unpin [reply message] ¬ª –û—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
	{prefix}del [reply message] ¬ª —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
	{prefix}purge [reply message] ¬ª —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ
	{prefix}tagall [string] ¬ª –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞</i>

<emoji id=5258096772776991776>‚öô</emoji> <b>–£—Ç–∏–ª–∏—Ç—ã:</b>
	<i>{prefix}join [user_id/chatname] ¬ª –ó–∞–π—Ç–∏ –≤ —á–∞—Ç
	{prefix}leave [user_id/chatname] ¬ª –í—ã–π—Ç–∏ —Å —á–∞—Ç–∞
	{prefix}ping ¬ª –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏–Ω–≥
	{prefix}pmbl [user_id/username] ¬ª –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	{prefix}unpmbl [user_id/username] ¬ª –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	{prefix}restart ¬ª –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —é–µ–∑—Ä–±–æ—Ç–∞
	{prefix}eval [string] ¬ª –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python
	{prefix}terminal [string] ¬ª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
	{prefix}voice [reply voice] ¬ª –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ì–°
	{prefix}creategroup [string] ¬ª –°–æ–∑–¥–∞—Ç—å —á–∞—Ç
	{prefix}dels [on/off] ¬ª –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	{prefix}tags [on/off] ¬ª –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —É–ø–æ–º–Ω–∏–Ω–∞–Ω–∏–∏ –≤–∞—Å –≤ —á–∞—Ç–∞—Ö
	{prefix}shifr (text) ¬ª —Ç—Ä–∞–Ω—Å–ª–∏—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
	{prefix}report (reply) (int) ¬ª –∑–∞–∫–∏–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç–∞–º–∏
	{prefix}gpt [string] ¬ª –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
	{prefix}setprefix [string] ¬ª —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –∫ –∫–æ–º–∞–Ω–¥–∞–º
	{prefix}weather [string] ¬ª —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ
	{prefix}serverinfo ¬ª  —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
	{prefix}info ¬ª —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–±–æ—Ç–µ</i>

<emoji id=5319259490778886242>ü§©</emoji> <b>–ê–Ω–∏–º–∞—Ü–∏–∏/–ø–ª—é—à–∫–∏:</b>
	<i>{prefix}magic ¬ª –ê–Ω–∏–º–∞—Ü–∏—è –æ–≥—Ä–æ–º–Ω–æ–≥–æ —Å–µ—Ä–¥–µ—á–∫–∞
	{prefix}love ¬ª –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑ —Å–µ—Ä–¥–µ—á–µ–∫
	{prefix}autoname [string] ¬ª –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤ –Ω–∏–∫
	{prefix}stopautoname ¬ª –£–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –≤ –Ω–∏–∫–µ</i>"""

@app.on_message(filters.command('info', prefixes=prefix))
async def info(client, message):
	m = await message.edit_text('üåô <b>–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ...</b>')
	try:
		cpu = f'{psutil.cpu_percent()}%'
	except:
		cpu = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
	try:
		ram = psutil.virtual_memory().used / (1024 * 1024)
		ram = f'{ram:.2f}'
	except:
		ram = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
	me = await client.get_me()
	name = me.first_name
	end_time = time.time() - start_time
	hours, rem = divmod(end_time, 3600)
	minutes, seconds = divmod(rem, 60)
	
	if system == "Windows":
		platform_name = "üñ• Windows"
	elif system == "Linux":
	       if "termux" in sys.argv[0]:
	       	platform_name = "üï∂ Termux"
	       elif "p3droid" in sys.argv[0]:
	       	platform_name = "üì± Pydroid3"
	       else:
	       	platform_name = "üêß Linux"
	elif system == "Darwin":
	 	platform_name = "üíª MacOS"
	else:
		platform_name = "‚ùì Unknown"
	
	await client.send_animation(message.chat.id, animation="xioca.mp4", caption=f'''
üåô <b>Xioca

üòé –í–ª–∞–¥–µ–ª–µ—Ü: {name}
üí´ –í–µ—Ä—Å–∏—è: {version}

‚å®Ô∏è –ü—Ä–µ—Ñ–∏–∫—Å: ¬´{prefix}¬ª
‚åõÔ∏è –ê–ø—Ç–∞–π–º: {int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}

‚ö°Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: <i>~{cpu}</i>
üíº –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: <i>~{ram} MB</i>

{platform_name}</b>''')
	await client.delete_messages(message.chat.id, m.id)

@app.on_message(filters.command('serverinfo', prefixes=prefix))
async def servinfo(client, message):
	try:
		cpu_count = psutil.cpu_count()
		cpu_freq = psutil.cpu_freq()
		cpu_percent = psutil.cpu_percent()
	
		memory_total = psutil.virtual_memory().total
		memory_available = psutil.virtual_memory().available
	
		disk_usage = psutil.disk_usage('/')
	
		net_io_counters = psutil.net_io_counters()
	except Exception as e:
		return await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–û—à–∏–±–∫–∞: {e}</b>')
	
	await message.edit_text(f'''
	üñ• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:
	
	üéõ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_count}
	üìà –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_freq.current:.2f} –ì–ì—Ü
	üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_percent}%
	üíΩ –í—Å–µ–≥–æ –ø–∞–º—è—Ç–∏: {memory_total / (10243):.2f} –ì–ë
	üíø –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {memory_available / (10243):.2f} –ì–ë
	üìÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_usage.percent}%
	
	üì° –°–µ—Ç–µ–≤–æ–π –≤–≤–æ–¥/–≤—ã–≤–æ–¥:
		‚¨Ö –í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {net_io_counters.bytes_recv / (10243):.2f} –ì–ë
		‚û° –ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {net_io_counters.bytes_sent / (10243):.2f} –ì–ë''')

@app.on_message(filters.command('weather', prefixes=prefix))
async def weather(client, message):
	try:
		qu = " ".join(message.text.split()[1:])
	except:
		return await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>')
	key = '18f76e3ac0c48dee34905f0c9e2e51d1'
	ed = 'metric'
	lang = 'ru'
	format = 'json'
	url = f"https://api.openweathermap.org/data/2.5/weather?q={qu}&units={ed}&lang={lang}&appid={key}"
	response = requests.get(url)
	if response.status_code == 200:
		data = response.json()
		return await message.edit_text(f'''
		üåá –ì–æ—Ä–æ–¥: {data['name']}
		üó∫ –°—Ç—Ä–∞–Ω–∞: {data['sys']['country']}
		üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']} ¬∞C
		‚òùÔ∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']} ¬∞C
		üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%
		üåé –î–∞–≤–ª–µ–Ω–∏–µ: {data['main']['pressure']} –≥–ü–∞
		üí® –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å
		‚õÖ –ü–æ–≥–æ–¥–∞: {data['weather'][0]['description']}''')
	else:
		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {response.status_code}</b>')

@app.on_message(filters.command('setprefix', prefixes=prefix))
async def setprefix(client, message):
	try:
		qu = " ".join(message.text.split()[1:])
	except:
		return await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>')
	
	await message.edit_text(f'‚úÖ <b>–ü—Ä–µ—Ñ–∏–∫—Å "{qu}" —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>')
	await asyncio.sleep(1)
	await message.edit_text(f'<emoji id=5258420634785947640>üîÑ</emoji> <code>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞...</code>')
	cursor.execute(f'UPDATE settings SET prefix = "{qu}"')
	connect.commit()
	restart()

@app.on_message(filters.command('gpt', prefixes=prefix))
async def chatgpt(client, message):
	try:
		qu = " ".join(message.text.split()[1:])
	except:
		return await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>')
	
	await message.edit_text(f'üåê <b>ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ...</b>')
	try:
		response = resp(qu)
	except Exception as e:
		return await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–û—à–∏–±–∫–∞: {e}</b>')
	
	try:
		await message.edit_text(f"‚ùì <b>–í–∞—à –≤–æ–ø—Ä–æ—Å: {qu}\nüåê –û—Ç–≤–µ—Ç ChatGPT:</b>\n{htm(response)}")
	except Exception as e:
		return await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–û—à–∏–±–∫–∞: {e}</b>')

@app.on_message(filters.command('lj', prefixes=prefix))
async def leavejoin(client, message):
	chat_id = message.chat.id
	await client.delete_messages(chat_id, message.id)
	await app.leave_chat(chat_id)
	await app.join_chat(chat_id)

@app.on_message(filters.command('shifr', prefixes=prefix))
async def shifr(client, message):
	try:
		text = " ".join(message.text.split()[1:])
	except:
		return await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>')
	
	await message.edit_text(ui(text))

@app.on_message(filters.command('report', prefixes=prefix))
async def report(client, message):
	r = message.reply_to_message.from_user
	try:
		spam = int(message.text.split()[1])
		print(spam)
	except Exception as e:
		return await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>')
		
	if r:
		us = r.username
		peer = await app.resolve_peer(f"@{us}")
		peer_id = peer.user_id
		access_hash = peer.access_hash
		
		channel = InputPeerChannel(channel_id=peer_id, access_hash=access_hash)
		reason  = get_report_reason("Report for child abuse.")
		report_peer = ReportPeer(peer=channel, reason=reason, message="spam")
		await message.edit_text(f'<b>–ñ–∞–ª—É—é—Å—å...</b>')
		num = 0
		l = []
		for i in range(0, spam):
			try:
				num += 1
				report = await app.send(report_peer)
			except Exception as e:
				l.append(e)
		try:
			lis = '\n'.join(l)
		except:
			lis = '–Ω–µ—Ç'
		await message.edit_text(f'<emoji id=5237907553152672597>‚úÖ</emoji> <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {num} –∂–∞–ª–æ–±!</b>')
	else:
		await message.edit_text('<emoji id=5237993272109967450>‚ùå</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>')
		

@app.on_message(filters.command('id', prefixes=prefix))
async def id(client, message):
	r = message.reply_to_message
	cid = message.chat.id
	
	if r:
		id = message.reply_to_message.from_user.id
		name = message.reply_to_message.from_user.first_name
		await message.edit_text(f'<emoji id=5472146462362048818>üí°</emoji> <b>ID {name}: <code>{id}</code>\n<emoji id=5818885490065017876>üÜî</emoji> Chat ID: {chat_id}</b>')
	else:
		await message.edit_text(f'<emoji id=5818885490065017876>üÜî</emoji> <b>Chat ID: {chat_id}</b>')

@app.on_message(filters.command('dels', prefixes=prefix))
async def dels(client, message):
	t = str(message.text.split()[1])
	ty = t.replace(f'{prefix}dels', '')
	type = ty.replace(f'{prefix}dels ', '')
	
	if type == 'on':
		await message.edit_text(f'<emoji id=5339536521009571338>üëã</emoji> <b>–¢–µ–ø–µ—Ä—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è!</b>')
		cursor.execute(f'UPDATE settings SET dels = "on"')
		connect.commit()
		chat_id = cursor.execute(f'SELECT dels_chat FROM settings').fetchone()
		chat_id = int(chat_id[0])
		try:
			await app.send_message(chat_id, f'<emoji id=5237907553152672597>‚úÖ</emoji> <b>–°—é–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—Å—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –õ–°!</b>')
		except:
			c = await app.create_supergroup('deleted messages')
			chat_id = c.id
			cursor.execute(f'UPDATE settings SET dels_chat = {chat_id}')
			connect.commit()
			await app.send_message(chat_id, f'<emoji id=5237907553152672597>‚úÖ</emoji> <b>–°—é–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—Å—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –õ–°!</b>')
	elif type == 'off':
		await message.edit_text(f'<emoji id=5472100935708711380>üëç</emoji> <b>–¢–µ–ø–µ—Ä—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è!</b>')
		cursor.execute(f'UPDATE settings SET dels = "off"')
		connect.commit()
	else:
		await message.edit_text('<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>')

@app.on_deleted_messages()
async def dels(client, message):
	dels = cursor.execute(f'SELECT dels from settings').fetchone()
	dels = str(dels[0])
	
	if dels == 'on':
		try:
			message_id = message[0].id
			print(message_id)
			user_id = cursor.execute(f'SELECT user_id from messages WHERE message_id = {message_id}').fetchone()
			message_text = cursor.execute(f'SELECT message_text FROM messages WHERE message_id = {message_id}').fetchone()
			dels_chat = cursor.execute(f'SELECT dels_chat from settings').fetchone()
			dels_chat = int(dels_chat[0])

			user_id = int(user_id[0])
			message_text = str(message_text[0])
			
			user = await app.get_users(user_id)
			first_name = user.first_name
			username = user.username
			await app.send_message(dels_chat, f'''<emoji id=5339536521009571338>üëã</emoji> {first_name} (@{username} | <code>{user_id}</code>) —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°!
<emoji id=5417875345804108985>üåç</emoji> –¢–µ–∫—Å—Ç ¬ª <i>{message_text}</i>
''')
		except Exception as e:
			print(e)
			return
	else:
		return
	
@app.on_message(filters.mentioned)
async def tags(client, message):
	chat_id = cursor.execute(f'SELECT tags_chat FROM settings').fetchone()
	tags = cursor.execute(f'SELECT tags FROM settings').fetchone()
	
	tags = str(tags[0])
	chat_id = int(chat_id[0])
	
	if tags == 'on':
		await app.send_message(chat_id, f'''<emoji id=5242628160297641831>üîî</emoji> <b>–í–∞—Å —Ç–µ–≥–Ω—É–ª–∏ –≤ —á–∞—Ç–µ</b> ¬´<code>{message.chat.title}</code>¬ª (@{message.chat.username})
<emoji id=5325770433566359627>üò≤</emoji> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬ª {message.from_user.first_name} (@{message.from_user.username})
<emoji id=5465204283383224325>üí¨</emoji> –°—Å—ã–ª–∫–∞ ¬ª {message.link}
<emoji id=5465300082628763143>üí¨</emoji> –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ¬ª <i>{message.text}</i>''', disable_web_page_preview = True)
		await app.read_chat_history(message.chat.id, message.id)
	else:
		return

@app.on_message(filters.command('tags', prefixes=prefix))
async def tags(client, message):
	tag = str(message.text.split()[1])
	ta = tag.replace(f'{prefix}tags', '')
	t = ta.replace(f'{prefix}tags ', '')
	
	if t == 'on':
		await message.edit_text('<emoji id=5472100935708711380>üëç</emoji> <b>–¢–µ–ø–µ—Ä—å –≤–∞—Å –Ω–µ –±—É–¥—É—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —Ç–µ–≥–∏!</b>')
		cursor.execute(f'UPDATE settings SET tags = "on"')
		connect.commit()
		try:
			chat_id = cursor.execute(f'SELECT tags_chat FROM settings').fetchone()
			chat_id = int(chat_id[0])
			await app.send_message(chat_id, f'<emoji id=5237907553152672597>‚úÖ</emoji> <b>–°—é–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—Å—è —Ç–µ–≥–∏ —Å —á–∞—Ç–æ–≤!</b>')
		except:
			c = await app.create_supergroup('tags')
			chat_id = c.id
			cursor.execute(f'UPDATE settings SET tags_chat = {chat_id}')
			connect.commit()
			await app.send_message(chat_id, f'<emoji id=5237907553152672597>‚úÖ</emoji> <b>–°—é–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—Å—è —Ç–µ–≥–∏ —Å —á–∞—Ç–æ–≤!</b>')
	elif t == 'off':
		await message.edit_text('<emoji id=5472100935708711380>üëç</emoji> <b>–í–∞—Å —Å–Ω–æ–≤–∞ –º–æ–≥—É—Ç —Ç–µ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —á–∞—Ç–∞—Ö!</b>')
		cursor.execute(f'UPDATE settings SET tags = "off"')
		connect.commit()
	else:
		await message.edit_text('<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>')

@app.on_message(filters.command('ids', prefixes=prefix))
async def ids_group(client, message):
	l = []
	chat_id = message.chat.id
	async for member in app.get_chat_members(chat_id):
		l.append(member.user.id)
	
	await app.send_message(message.chat.id, l)

@app.on_message(filters.command('creategroup', prefixes=prefix))
async def create_group(client, message):
	try:
		title = " ".join(message.text.split())
	except:
		await message.edit_text('<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>')
		return
	
	t = title.replace(f'{prefix}creategroup ',  '')
	
	if len(t) >= 100:
		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–í –Ω–∞–∑–≤–∞–Ω–∏–∏ —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤!</b>')
		return
	
	await message.edit_text(f'<emoji id=5237907553152672597>‚úÖ</emoji> <b>–ß–∞—Ç ¬´{t}¬ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>')
	await app.create_supergroup(t)

@app.on_message(filters.command('stopautoname', prefixes=prefix))
async def clock(client, message):
	name = cursor.execute(f'SELECT name from settings').fetchone()
	name = str(name[0])
	await message.edit_text(f'<emoji id=5237907553152672597>‚úÖ</emoji> <b>–í—Ä–µ–º—è –≤ –Ω–∏–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>')
	n = name.replace(f'{prefix}autoname ', '')
	nm = n.replace("{time}", '')
	try:
		await app.update_profile(first_name=f"{nm}")
	except:
		await app.update_profile(first_name=f'–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫')
	cursor.execute(f'UPDATE settings SET autoname = "off"')
	connect.commit()
	
@app.on_message(filters.command('autoname', prefixes=prefix))
async def clock(client, message):
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫—É
    try:
    	n = " ".join(message.text.split())
    except Exception as e:
    	return await message.edit_text('<emoji id=5237993272109967450>‚ùå</emoji> <b>–û—à–∏–±–∫–∞: {e}</b>')
    if '{time}' not in n:
    	return await message.edit_text('<emoji id=5237993272109967450>‚ùå</emoji> <b>–í –≤–≤–µ–¥–µ–Ω–Ω–æ–º –Ω–∏–∫–µ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç "{time}"</b>')
   
    type = cursor.execute('SELECT autoname FROM settings').fetchone()[0]
    if type == 'on':
    	return await message.edit_text('<emoji id=5237993272109967450>‚ùå</emoji> <b>–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –≤ –Ω–∏–∫–µ!</b>')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫
    await message.edit_text(f'<emoji id=5237907553152672597>‚úÖ</emoji> <b>–í—Ä–µ–º—è –≤ –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>')
    cursor.execute(f'UPDATE settings SET name = "{n}"')
    cursor.execute(f'UPDATE settings SET autoname = "on"')
    connect.commit()

    # –¶–∏–∫–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∏–∫–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 60 —Å–µ–∫—É–Ω–¥
    while True:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ autoname –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        autoname_status = cursor.execute('SELECT autoname FROM settings').fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ autoname
        if autoname_status == 'on':
            current_time = get_current_time()
            name = n.replace(f'{prefix}autoname ', '')
            name = name.replace("{time}", current_time)
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
            try:
            	await app.update_profile(first_name=f"{name}")
            	await asyncio.sleep(60)
            except:
            	await asyncio.sleep(600)
        else:
            # –ï—Å–ª–∏ autoname –≤—ã–∫–ª—é—á–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
            break

@app.on_message(filters.command('purge', prefixes=prefix))
async def delete_mes(client, message):
    start_message_id = message.id
    end_message_id = message.reply_to_message.id
    chat_id = message.chat.id

    ids = []

    async for message in client.get_chat_history(chat_id):
        if message.id == end_message_id:
            break
        ids.append(message.id)
    ids.append(end_message_id)
    await client.delete_messages(chat_id, ids)

@app.on_message(filters.command('del', prefixes=prefix))
async def delete_mes(client, message):
	try:
		msg = message.reply_to_message.id
	except:
		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>')
		return
	message_id = message.id
	chat_id = message.chat.id
	list = [msg, message_id]
	await client.delete_messages(chat_id, list)

@app.on_message(filters.command('love', prefixes=prefix))
async def love(client, message):
	emoji = ['‚ù§Ô∏è', 'ü©∑', 'üß°', 'üíõ', 'üíö', 'ü©µ', 'üíô', 'üíú', 'üñ§', 'ü©∂', 'ü§ç', 'ü§é', 'üíñ', 'üíù', 'üíì', 'üíó', "I", "I ‚ù§Ô∏è", "I ‚ù§Ô∏è U", "I ‚ù§Ô∏è U!"]
	for i in emoji:
		await message.edit_text(f'<b>{i}</b>')
		await asyncio.sleep(0.3)

@app.on_message(filters.command('magic', prefixes=prefix))
async def magiclove(client, message):
			arr = ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "üíñ"]
			h = "ü§ç"
			first = ""		
			for i in "".join([h*9, "\n", h*2, arr[0]*2, h, arr[0]*2, h*2, "\n", h, arr[0]*7, h, "\n", h, arr[0]*7, h, "\n", h, arr[0]*7, h, "\n", h*2, arr[0]*5, h*2, "\n", h*3, arr[0]*3, h*3, "\n", h*4, arr[0], h*4]).split("\n"):
				first += i + "\n"
				await message.edit_text(first)
				await asyncio.sleep(0.2)		
			for i in arr:
				await message.edit_text("".join([h*9, "\n", h*2, i*2, h, i*2, h*2, "\n", h, i*7, h, "\n", h, i*7, h, "\n", h, i*7, h, "\n", h*2, i*5, h*2, "\n", h*3, i*3, h*3, "\n", h*4, i, h*4, "\n", h*9]))
				await asyncio.sleep(0.3)
			for _ in range(8):
				rand = random.choices(arr, k=34)
				await message.edit_text("".join([h*9, "\n", h*2, rand[0], rand[1], h, rand[2], rand[3], h*2, "\n", h, rand[4], rand[5], rand[6], rand[7], rand[8],rand[9],rand[10], h, "\n", h, rand[11], rand[12], rand[13], rand[14], rand[15], rand[16],rand[17], h, "\n", h, rand[18], rand[19], rand[20], rand[21], rand[22], rand[23],rand[24], h, "\n", h*2, rand[25], rand[26], rand[27], rand[28], rand[29], h*2, "\n", h*3, rand[30], rand[31], rand[32], h*3, "\n", h*4, rand[33], h*4, "\n", h*9]))
				await asyncio.sleep(0.3)
			fourth = "".join([h*9, "\n", h*2, arr[0]*2, h, arr[0]*2, h*2, "\n", h, arr[0]*7, h, "\n", h, arr[0]*7, h, "\n", h, arr[0]*7, h, "\n", h*2, arr[0]*5, h*2, "\n", h*3, arr[0]*3, h*3, "\n", h*4, arr[0], h*4, "\n", h*9])
			await message.edit_text(fourth)
			for _ in range(47):
				fourth = fourth.replace("ü§ç", "‚ù§Ô∏è", 1)
				await message.edit_text(fourth)
				await asyncio.sleep(0.1)
			for i in range(8):
				await message.edit_text((arr[0]*(8-i)+"\n")*(8-i))
				await asyncio.sleep(0.4)
			for i in ["I", "I ‚ù§Ô∏è", "I ‚ù§Ô∏è U", "I ‚ù§Ô∏è U!"]:
				await message.edit_text(f"<b>{i}</b>")
				await asyncio.sleep(0.5)

@app.on_message(filters.command('voice', prefixes=prefix))
async def voice(client, message):
    await message.edit_text('üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é...</b>')
    voice = message.reply_to_message.voice
    if not voice:
        await message.edit_text('<emoji id=5237993272109967450>‚ùå</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>')
        return
    file_id = voice.file_id
    try:
        voice_file = await client.download_media(file_id)
        
        converted_file = voice_file.replace('.ogg', '.wav')
        AudioSegment.from_file(voice_file).export(converted_file, format='wav')
        
        recognizer = sr.Recognizer()
        with sr.AudioFile(converted_file) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language='ru-RU')
        await message.edit_text(f'‚úÖ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b> <i>{text}</i>')
        os.remove(voice_file)
        os.remove(converted_file)
    except Exception as e:
        await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{e}</code>')

@app.on_message(filters.command('tagall', prefixes=prefix))
async def tagall(client, message):
    chat_id = message.chat.id

    num = 0
    await message.edit_text(f'<emoji id=5471930335312747865>üí¨</emoji> <b>–û—Ç–º–µ—á–∞—é...</b>')
    async for member in app.get_chat_members(chat_id):
        if member.user.username is None:
            pass
        elif member.user.id == message.from_user.id:
        	pass
        elif member.user.is_bot:
        	pass
        else:
            title = " ".join(message.text.split())
            tit = title.replace(f"{prefix}tagall ",  '')
            t = tit.replace(f'{prefix}tagall', '')
            if t == '':
            	tt = f'<b><a href="tg://user?id={member.user.id}">{member.user.first_name}</a></b>'
            else:
            	tt = f'<b><a href="tg://user?id={member.user.id}">{t}</a></b>'
            await app.send_message(chat_id, tt)
            num += 1
    await app.send_message(chat_id, f'<emoji id=5474371208176737086>‚úâÔ∏è</emoji> <b>–û—Ç–º–µ—á–µ–Ω–æ {num} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>')

@app.on_message(filters.command(['t', 'terminal'], prefixes=prefix) & filters.me)
async def terminal(client, message):
    code = message.text
    command = code.replace(f"{prefix}terminal ", "").replace(f"{prefix}t ", "")
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()
    if process.returncode == 0:
        await message.edit_text(f'''<emoji id=5339181821135431228>üíª</emoji> <b>–ö–æ–º–∞–Ω–¥–∞:</b>
```bash
{command}```

<emoji id=5375360100196163660>üê≤</emoji> <b>–í—ã–≤–æ–¥:</b>
```bash
{output.decode()}```
''')
    else:
        await message.edit(f'''<emoji id=5339181821135431228>üíª</emoji> <b>–ö–æ–º–∞–Ω–¥–∞:</b>
```bash
{command}```

<emoji id=5237993272109967450>‚ùå</emoji> <b>–û—à–∏–±–∫–∞:</b>
```bash
{error.decode()}```''')

@app.on_message(filters.command(['t', 'terminal'], prefixes=prefix) & filters.me)
async def terminal(client, message):
	code = message.text
	command = code.replace(f"{prefix}terminal ", "").replace(f"{prefix}t ", "")
	subprocess.Popen(command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	output, error = process.communicate()
	try:
		await message.edit_text(f'''<emoji id=5339181821135431228>üíª</emoji> <b>–ö–æ–º–∞–Ω–¥–∞:</b>
```bash
{command}```

<emoji id=5375360100196163660>üê≤</emoji> <b>–í—ã–≤–æ–¥:</b>
```bash
{output.decode()}```''')
	except:
		await message.edit_text(f'''<emoji id=5339181821135431228>üíª</emoji> <b>–ö–æ–º–∞–Ω–¥–∞:</b>
```bash
{command}```

<emoji id=5375360100196163660>üê≤</emoji> <b>–í—ã–≤–æ–¥:</b>
```bash
{output.decode()}```''')

@app.on_message(filters.command('restart', prefixes=prefix) & filters.me)
async def res(client, message):
    await message.edit_text(f'<emoji id=5258420634785947640>üîÑ</emoji> <code>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å...</code>')
    restart()

@app.on_message(filters.command(["eval", 'e'], prefixes=prefix) & filters.me)
async def ev(client, message):
    	code = message.text.strip()
    	code = code.replace(f"{prefix}eval ", "").replace(f"{prefix}e ", "")
    	try:
    	   f = StringIO()
    	   with redirect_stdout(f):
    	   	exec(code)
    	   out = f.getvalue()
    	   return await message.edit_text(f'''<emoji id=5339181821135431228>üíª</emoji> <b>–ö–æ–¥:</b>
```python
{code}```

<emoji id=5175061663237276437>üêç</emoji> <b>–í—ã–≤–æ–¥:</b>
```python
{str(out).replace(">", "").replace("<", "")}```''')
    	except Exception as ex:
    		return await message.edit_text(f'''<emoji id=5339181821135431228>üíª</emoji> <b>–ö–æ–¥:</b>
```python
{code}```

<emoji id=5237993272109967450>‚ùå</emoji> <b>–û—à–∏–±–∫–∞:</b>
```python
{str(ex).replace(">", "").replace("<", "")}```''')
#await message.reply(str(out).replace("<", "").replace(">", ""))
#await message.reply(str(ex).replace(">", "").replace("<", ""))

@app.on_message(filters.command("unpmbl", prefixes=prefix) & filters.me)
async def unpmbl(client, message):
    try:
        if message.reply_to_message:
            id = message.reply_to_message.from_user.id
            name = message.reply_to_message.from_user.first_name
        else:
            id = message.text.split()[1]
            user = await app.get_users(id)
            name = user.first_name
    except Exception as e:
        await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return

    if isinstance(id, int):
    	pass
    else:
    	try:
    		i = id.replace("@", '')
    		i = id.replace("https://t.me/", '')
    		id = await get_user_id(i)
    	except Exception as e:
    		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –õ–°: {e}')
    		return
    
    await app.unblock_user(id)
    await message.edit_text(f'<emoji id=5472180551517477902>‚úÖ</emoji> <b>{name}</b> –±—ã–ª —É–±—Ä–∞–Ω –∏–∑ –ß–°!')

@app.on_message(filters.command("pmbl", prefixes=prefix) & filters.me)
async def pmbl(client, message):
    try:
        if message.reply_to_message:
            id = message.reply_to_message.from_user.id
            name = message.reply_to_message.from_user.first_name
        else:
            id = message.text.split()[1]
            user = await app.get_users(id)
            name = user.first_name
    except Exception as e:
        await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return

    if isinstance(id, int):
    	pass
    else:
    	try:
    		i = id.replace("@", '')
    		i = id.replace("https://t.me/", '')
    		id = await get_user_id(i)
    	except Exception as e:
    		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –õ–°: {e}')
    		return
    
    await app.block_user(id)
    await message.edit_text(f'<emoji id=5472030751648127392>üõë</emoji> <b>{name}</b> –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω(-–∞) –≤ –ß–°!')

@app.on_message(filters.command("unpin", prefixes=prefix) & filters.me)
async def unpin(client, message):
	chat_id = message.chat.id
	if message.reply_to_message:
		message_id = message.reply_to_message.id
		await app.unpin_chat_message(chat_id, message_id)
		await message.edit_text('<emoji id=5258461531464539536>üìå</emoji> –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ!')
	else:
		await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

@app.on_message(filters.command("pin", prefixes=prefix) & filters.me)
async def pin(client, message):
	chat_id = message.chat.id
	if message.reply_to_message:
		message_id = message.reply_to_message.id
		await app.pin_chat_message(chat_id, message_id)
		await message.edit_text('<emoji id=5258461531464539536>üìå</emoji> –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!')
	else:
		await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
	
@app.on_message(filters.command("leave", prefixes=prefix) & filters.me)
async def leave(client, message):
    try:
    	id_chat = message.text.split()[1]
    except:
    	await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    	return

    if isinstance(id_chat, int):
    	pass
    else:
    	try:
    		i = id_chat.replace("@", '')
    		i = id_chat.replace("https://t.me/", '')
    		id = await get_chat_id(i)
    	except Exception as e:
    		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ —Å —á–∞—Ç–∞: {e}')
    		return
    
    await app.leave_chat(id)
    await message.edit_text(f'<emoji id=5474371208176737086>‚úâÔ∏è</emoji> –í—ã –≤—ã—à–ª–∏ —Å —á–∞—Ç–∞ {id_chat}!')

@app.on_message(filters.command("join", prefixes=prefix) & filters.me)
async def join(client, message):
    try:
    	id_chat = message.text.split()[1]
    except:
    	await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    	return

    if isinstance(id_chat, int):
    	pass
    else:
    	try:
    		i = id_chat.replace("@", '')
    		i = id_chat.replace("https://t.me/", '')
    		id = await get_chat_id(i)
    	except Exception as e:
    		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç: {e}')
    		return
    
    await app.join_chat(id)
    await message.edit_text(f'<emoji id=5474371208176737086>‚úâÔ∏è</emoji> –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —á–∞—Ç {id_chat}!')

@app.on_message(filters.command("unban", prefixes=prefix) & filters.me)
async def unban(client, message):
    chat_id = message.chat.id
    try:
        if message.reply_to_message:
            id = message.reply_to_message.from_user.id
            name = message.reply_to_message.from_user.first_name
            reason = " ".join(message.text.split()[1:])
        else:
            id = message.text.split()[1]
            user = await app.get_users(id)
            name = user.first_name
            reason = " ".join(message.text.split()[2:])
    except Exception as e:
        await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return

    if not reason:
        t = ''
    else:
        t = f'–ü—Ä–∏—á–∏–Ω–∞ ¬ª <i>{reason}</i>'

    if isinstance(id, int):
    	pass
    else:
    	try:
    		i = id.replace("@", '')
    		i = id.replace("https://t.me/", '')
    		id = await get_user_id(i)
    	except Exception as e:
    		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
    		return
    
    try:
        await client.unban_chat_member(chat_id, id)
    except Exception as e:
        await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
        return
    await message.edit_text(f'<emoji id=5472100935708711380>üëç</emoji> <b>{name}</b>, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! {t}')

@app.on_message(filters.command("ban", prefixes=prefix) & filters.me)
async def ban(client, message):
    chat_id = message.chat.id
    try:
        if message.reply_to_message:
            id = message.reply_to_message.from_user.id
            name = message.reply_to_message.from_user.first_name
            time = int(message.text.split()[1])
            date = message.text.split()[2]
            reason = " ".join(message.text.split()[3:])
        else:
            id = message.text.split()[1]
            user = await app.get_users(id)
            name = user.first_name
            time = int(message.text.split()[2])
            date = message.text.split()[3]
            reason = " ".join(message.text.split()[4:])
    except Exception as e:
        await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return

    if not reason:
        t = ''
    else:
        t = f'–ü—Ä–∏—á–∏–Ω–∞ ¬ª <i>{reason}</i>'
    
    if isinstance(id, int):
    	pass
    else:
    	try:
    		i = id.replace("@", '')
    		i = id.replace("https://t.me/", '')
    		id = await get_user_id(i)
    	except Exception as e:
    		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
    		return
    
    if date in ['–º', '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω', 'm', 'min', 'minute', 'minutes']:
    	dt = datetime.now() + timedelta(minutes=time)
    	d = '–º–∏–Ω—É—Ç'
    elif date in ['—á–∞—Å–æ–≤', '—á–∞—Å', '—á–∞—Å–∞', 'h', '—á' 'hours', 'hour']:
    	dt = datetime.now() + timedelta(hours=time)
    	d = '—á–∞—Å–æ–≤'
    elif date in ['–¥', '–¥–Ω–µ–π', '–¥–µ–Ω—å', '–¥–Ω—è', 'days', 'day', "d"]:
    	dt = datetime.now() + timedelta(days=time)
    	d = '–¥–Ω–µ–π'
    else:
    	await message.edit_text('<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>')
    	return
    	
    full_time_dt = dt.timestamp()
    full_time = datetime.fromtimestamp(full_time_dt)
    try:
        await app.ban_chat_member(chat_id, id, until_date=full_time)
    except Exception as e:
        await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
        return

    await message.edit_text(f'<emoji id=5472267631979405211>üö´</emoji> <b>{name}</b>, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ <i>{time} {d}</i>. {t}')

@app.on_message(filters.command("unmute", prefixes=prefix) & filters.me)
async def unmute(client, message):
    chat_id = message.chat.id
    try:
        if message.reply_to_message:
            id = message.reply_to_message.from_user.id
            name = message.reply_to_message.from_user.first_name
            reason = " ".join(message.text.split()[1:])
        else:
            id = message.text.split()[1]
            user = await app.get_users(id)
            name = user.first_name
            reason = " ".join(message.text.split()[2:])
    except Exception as e:
        await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return

    if not reason:
        t = ''
    else:
        t = f'–ü—Ä–∏—á–∏–Ω–∞ ¬ª <i>{reason}</i>'

    if isinstance(id, int):
    	pass
    else:
    	try:
    		i = id.replace("@", '')
    		i = id.replace("https://t.me/", '')
    		id = await get_user_id(i)
    	except Exception as e:
    		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
    		return
    
    try:
        await client.restrict_chat_member(chat_id, id, ChatPermissions(can_send_messages=True))
    except Exception as e:
        await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
        return

    await message.edit_text(f'<emoji id=5472100935708711380>üëç</emoji> <b>{name}</b>, —Ä–∞–∑–º—É—á–µ–Ω! {t}')

@app.on_message(filters.command("mute", prefixes=prefix) & filters.me)
async def mute(client, message):
    chat_id = message.chat.id
    try:
        if message.reply_to_message:
            id = message.reply_to_message.from_user.id
            name = message.reply_to_message.from_user.first_name
            time = int(message.text.split()[1])
            date = message.text.split()[2]
            reason = " ".join(message.text.split()[3:])
        else:
            id = message.text.split()[1]
            user = await app.get_users(id)
            name = user.first_name
            time = int(message.text.split()[2])
            date = message.text.split()[3]
            reason = " ".join(message.text.split()[4:])
    except Exception as e:
        await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return

    if not reason:
        t = ''
    else:
        t = f'–ü—Ä–∏—á–∏–Ω–∞ ¬ª <i>{reason}</i>'
    
    if isinstance(id, int):
    	pass
    else:
    	try:
    		i = id.replace("@", '')
    		i = id.replace("https://t.me/", '')
    		id = await get_user_id(i)
    	except Exception as e:
    		await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
    		return
    		
    if date in ['–º', '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω', 'm', 'min', 'minute', 'minutes']:
    	dt = datetime.now() + timedelta(minutes=time)
    	d = '–º–∏–Ω—É—Ç'
    elif date in ['—á–∞—Å–æ–≤', '—á–∞—Å', '—á–∞—Å–∞', 'h', '—á' 'hours', 'hour']:
    	dt = datetime.now() + timedelta(hours=time)
    	d = '—á–∞—Å–æ–≤'
    elif date in ['–¥', '–¥–Ω–µ–π', '–¥–µ–Ω—å', '–¥–Ω—è', 'days', 'day']:
    	dt = datetime.now() + timedelta(days=time)
    	d = '–¥–Ω–µ–π'
    else:
    	await message.edit_text('<emoji id=5237993272109967450>‚ùå</emoji> <b>–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>')
    	return

    full_time_dt = dt.timestamp()
    full_time = datetime.fromtimestamp(full_time_dt)
    try:
        await client.restrict_chat_member(chat_id, id, ChatPermissions(), until_date=full_time)
    except Exception as e:
        await message.edit_text(f'<emoji id=5237993272109967450>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
        return

    await message.edit_text(f'<emoji id=5460662076294831027>ü§ê</emoji> <b>{name}</b>, –∑–∞–º—É—á–µ–Ω –Ω–∞ <i>{time} {d}</i>. {t}')

@client.on_message(filters.command("ping", prefixes=prefix))
async def ping(client, message):
	a = time.time()
	m = await message.edit_text(f'üåô')
	if m:
		b = time.time()
		end_time = time.time() - start_time
		hours, rem = divmod(end_time, 3600)
		minutes, seconds = divmod(rem, 60)
		await m.edit_text(f'üåô –ü–∏–Ω–≥: <b>{round((b - a) * 1000)}</b> ms\n<emoji id=5431449001532594346>‚ö°Ô∏è</emoji> –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞: <b>{int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}</b>')

@client.on_message(filters.command("spam", prefixes=prefix))
async def ping(client, message):
	try:
		count = int(message.text.split()[1])
		if message.reply_to_message:
			text = message.reply_to_message.text
		else:
			text = " ".join(message.text.split()[2:])
	except:
		await message.edit_text(f"<emoji id=5237993272109967450>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
		return
	chat_id = message.chat.id
	await message.edit_text(text)
	for i in range(count-1):
		await app.send_message(chat_id, text)
		
@client.on_message(filters.command("help", prefixes=prefix))
async def help(client, message):
    await message.edit_text(help_text)
    
@app.on_message()
async def all(client, message):
	if '-100' in str(message.chat.id):
		return
	else:
		cursor.execute("INSERT INTO messages VALUES(?, ?, ?);", (message.id, message.from_user.id, message.text))
		connect.commit()

if __name__ == "__main__":
	client.run()